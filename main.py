import numpy as np

G = np.array(
    [[0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
     [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
     [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0],
     [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]])

MM = G.shape[0]
Tau = np.ones((MM*MM, MM*MM))
Tau = 8 * Tau
K = 100
M = 50
S = 1
E = MM*MM
Alpha = 1
Beta = 7
Rho = 0.3
Q = 1
minkl = np.Inf
mink = 0
minl = 0
D = G2D(G)
N = D.shape[0]
a = 1
Ex = a * (np.mod(E, MM) - 0.5)
if E == -0.5:
    Ex = MM-0.5
Ey = a*(MM+0.5-np.ceil(E/MM))
Eta = np.zeros(N)
for i in range(0, N):
    ix = a * (np.mod(i, MM) - 0.5)
    if ix == -0.5:
        ix = MM-0.5
    iy = a * (MM+0.5-np.ceil(i/MM))
    if i != E:
        Eta[i] = 1/((ix-Ex)**2+(iy-Ey)**2)**0.5
    else:
        Eta[i] = 100

ROUTES = [[0] * M] * K
PL = np.zeros((K, M))

for k in range(0, K):
    for M in range(0, M):
        W = S
        Path = S
        PLkm = 0
        TABUkm = np.ones(N)
        TABUkm[S-1] = 0
        DD = D

        DW = DD[W-1, :]
        DW1 = np.argwhere(DW != 0)
        for j in range(0, DW1.size):
            if TABUkm[DW1[j]] == 0:
                DW[DW1[j]] = 0
        LJD = np.argwhere(DW != 0)
        Len_LJD = LJD.size
